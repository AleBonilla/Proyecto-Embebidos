
KEYPAD_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000486  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800146  00800146  00000560  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140b  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ef  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e1  00000000  00000000  0000225a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000626  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000070f  00000000  00000000  0000319a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000038a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 34       	cpi	r26, 0x47	; 71
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
  9e:	0c 94 41 02 	jmp	0x482	; 0x482 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_write_nible>:
    if(loc<8){
        LCD_cmd(0x40+(loc*8));  /* Command 0x40 and onwards forces the device to point CGRAM address */
        for(i=0;i<8;i++)  /* Write 8 byte for generation of 1 character */
            LCD_dato(msg[i]);
    }   
}
  a6:	80 ff       	sbrs	r24, 0
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <LCD_write_nible+0xc>
  aa:	9b b1       	in	r25, 0x0b	; 11
  ac:	90 62       	ori	r25, 0x20	; 32
  ae:	9b b9       	out	0x0b, r25	; 11
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <LCD_write_nible+0x12>
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	9f 7d       	andi	r25, 0xDF	; 223
  b6:	9b b9       	out	0x0b, r25	; 11
  b8:	81 ff       	sbrs	r24, 1
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <LCD_write_nible+0x1e>
  bc:	9b b1       	in	r25, 0x0b	; 11
  be:	90 64       	ori	r25, 0x40	; 64
  c0:	9b b9       	out	0x0b, r25	; 11
  c2:	03 c0       	rjmp	.+6      	; 0xca <LCD_write_nible+0x24>
  c4:	9b b1       	in	r25, 0x0b	; 11
  c6:	9f 7b       	andi	r25, 0xBF	; 191
  c8:	9b b9       	out	0x0b, r25	; 11
  ca:	82 ff       	sbrs	r24, 2
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <LCD_write_nible+0x30>
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	90 68       	ori	r25, 0x80	; 128
  d2:	9b b9       	out	0x0b, r25	; 11
  d4:	03 c0       	rjmp	.+6      	; 0xdc <LCD_write_nible+0x36>
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	9f 77       	andi	r25, 0x7F	; 127
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	83 ff       	sbrs	r24, 3
  de:	04 c0       	rjmp	.+8      	; 0xe8 <LCD_write_nible+0x42>
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	03 c0       	rjmp	.+6      	; 0xee <LCD_write_nible+0x48>
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	8b 7f       	andi	r24, 0xFB	; 251
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	87 ec       	ldi	r24, 0xC7	; 199
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_write_nible+0x52>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_write_nible+0x58>
  fe:	00 00       	nop
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	8f 7e       	andi	r24, 0xEF	; 239
 104:	8b b9       	out	0x0b, r24	; 11
 106:	08 95       	ret

00000108 <LCD_cmd>:
 108:	cf 93       	push	r28
 10a:	c8 2f       	mov	r28, r24
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	8b b9       	out	0x0b, r24	; 11
 112:	00 00       	nop
 114:	8c 2f       	mov	r24, r28
 116:	82 95       	swap	r24
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write_nible>
 11e:	8c 2f       	mov	r24, r28
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write_nible>
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_cmd+0x22>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_cmd+0x28>
 130:	00 00       	nop
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <LCD_init>:
 136:	cf 93       	push	r28
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	8a b9       	out	0x0a, r24	; 10
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	80 61       	ori	r24, 0x10	; 16
 142:	8a b9       	out	0x0a, r24	; 10
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	87 7f       	andi	r24, 0xF7	; 247
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	80 62       	ori	r24, 0x20	; 32
 154:	8a b9       	out	0x0a, r24	; 10
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	8a b9       	out	0x0a, r24	; 10
 15c:	8a b1       	in	r24, 0x0a	; 10
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	8a b9       	out	0x0a, r24	; 10
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	84 60       	ori	r24, 0x04	; 4
 166:	8a b9       	out	0x0a, r24	; 10
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	89 ef       	ldi	r24, 0xF9	; 249
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <LCD_init+0x38>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_init+0x42>
 178:	00 00       	nop
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	0a c0       	rjmp	.+20     	; 0x192 <LCD_init+0x5c>
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write_nible>
 184:	8f e1       	ldi	r24, 0x1F	; 31
 186:	9e e4       	ldi	r25, 0x4E	; 78
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_init+0x52>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_init+0x58>
 18e:	00 00       	nop
 190:	cf 5f       	subi	r28, 0xFF	; 255
 192:	c3 30       	cpi	r28, 0x03	; 3
 194:	a0 f3       	brcs	.-24     	; 0x17e <LCD_init+0x48>
 196:	83 e3       	ldi	r24, 0x33	; 51
 198:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 19c:	82 e3       	ldi	r24, 0x32	; 50
 19e:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 1a2:	88 e2       	ldi	r24, 0x28	; 40
 1a4:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 1ba:	8f ed       	ldi	r24, 0xDF	; 223
 1bc:	9e e2       	ldi	r25, 0x2E	; 46
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_init+0x88>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_init+0x8e>
 1c4:	00 00       	nop
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <LCD_dato>:
 1ca:	cf 93       	push	r28
 1cc:	c8 2f       	mov	r28, r24
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	88 60       	ori	r24, 0x08	; 8
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	00 00       	nop
 1d6:	8c 2f       	mov	r24, r28
 1d8:	82 95       	swap	r24
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write_nible>
 1e0:	8c 2f       	mov	r24, r28
 1e2:	8f 70       	andi	r24, 0x0F	; 15
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write_nible>
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_dato+0x22>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_dato+0x28>
 1f2:	00 00       	nop
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <LCD_printf>:
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <LCD_printf+0xe>
 200:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_dato>
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	88 81       	ld	r24, Y
 208:	81 11       	cpse	r24, r1
 20a:	fa cf       	rjmp	.-12     	; 0x200 <LCD_printf+0x8>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_cursor>:
 212:	88 23       	and	r24, r24
 214:	21 f0       	breq	.+8      	; 0x21e <LCD_cursor+0xc>
 216:	8f e0       	ldi	r24, 0x0F	; 15
 218:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 21c:	08 95       	ret
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 224:	08 95       	ret

00000226 <LCD_clear>:
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 22c:	8f e3       	ldi	r24, 0x3F	; 63
 22e:	9f e1       	ldi	r25, 0x1F	; 31
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_clear+0xa>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_clear+0x10>
 236:	00 00       	nop
 238:	08 95       	ret

0000023a <LCD_home>:
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_cmd>
 240:	8f e3       	ldi	r24, 0x3F	; 63
 242:	9f e1       	ldi	r25, 0x1F	; 31
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_home+0xa>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_home+0x10>
 24a:	00 00       	nop
 24c:	08 95       	ret

0000024e <KEYPAD_init>:


void KEYPAD_init(void)
{
	
	DDRBbits.DDRB0 = 1;
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	81 60       	ori	r24, 0x01	; 1
 252:	84 b9       	out	0x04, r24	; 4
	DDRBbits.DDRB1 = 1;
 254:	84 b1       	in	r24, 0x04	; 4
 256:	82 60       	ori	r24, 0x02	; 2
 258:	84 b9       	out	0x04, r24	; 4
	DDRBbits.DDRB2 = 1;
 25a:	84 b1       	in	r24, 0x04	; 4
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	84 b9       	out	0x04, r24	; 4
	DDRBbits.DDRB3 = 1;
 260:	84 b1       	in	r24, 0x04	; 4
 262:	88 60       	ori	r24, 0x08	; 8
 264:	84 b9       	out	0x04, r24	; 4
	
	DDRCbits.DDRC0 = 0;
 266:	87 b1       	in	r24, 0x07	; 7
 268:	8e 7f       	andi	r24, 0xFE	; 254
 26a:	87 b9       	out	0x07, r24	; 7
	DDRCbits.DDRC1 = 0;
 26c:	87 b1       	in	r24, 0x07	; 7
 26e:	8d 7f       	andi	r24, 0xFD	; 253
 270:	87 b9       	out	0x07, r24	; 7
	DDRCbits.DDRC2 = 0;
 272:	87 b1       	in	r24, 0x07	; 7
 274:	8b 7f       	andi	r24, 0xFB	; 251
 276:	87 b9       	out	0x07, r24	; 7
	DDRCbits.DDRC3 = 0;
 278:	87 b1       	in	r24, 0x07	; 7
 27a:	87 7f       	andi	r24, 0xF7	; 247
 27c:	87 b9       	out	0x07, r24	; 7
	
	PORTCbits.PC0_ = 1;
 27e:	88 b1       	in	r24, 0x08	; 8
 280:	81 60       	ori	r24, 0x01	; 1
 282:	88 b9       	out	0x08, r24	; 8
	PORTCbits.PC1_ = 1;
 284:	88 b1       	in	r24, 0x08	; 8
 286:	82 60       	ori	r24, 0x02	; 2
 288:	88 b9       	out	0x08, r24	; 8
	PORTCbits.PC2_ = 1;
 28a:	88 b1       	in	r24, 0x08	; 8
 28c:	84 60       	ori	r24, 0x04	; 4
 28e:	88 b9       	out	0x08, r24	; 8
	PORTCbits.PC3_ = 1;
 290:	88 b1       	in	r24, 0x08	; 8
 292:	88 60       	ori	r24, 0x08	; 8
 294:	88 b9       	out	0x08, r24	; 8
 296:	08 95       	ret

00000298 <COLUMNA_scan>:
}

uint8_t COLUMNA_scan(void)
{

	if(COLUMNA1 == 0)
 298:	30 99       	sbic	0x06, 0	; 6
 29a:	09 c0       	rjmp	.+18     	; 0x2ae <COLUMNA_scan+0x16>
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
 29c:	30 9b       	sbis	0x06, 0	; 6
 29e:	fe cf       	rjmp	.-4      	; 0x29c <COLUMNA_scan+0x4>
 2a0:	31 9b       	sbis	0x06, 1	; 6
 2a2:	fc cf       	rjmp	.-8      	; 0x29c <COLUMNA_scan+0x4>
 2a4:	32 9b       	sbis	0x06, 2	; 6
 2a6:	fa cf       	rjmp	.-12     	; 0x29c <COLUMNA_scan+0x4>
 2a8:	33 9b       	sbis	0x06, 3	; 6
 2aa:	f8 cf       	rjmp	.-16     	; 0x29c <COLUMNA_scan+0x4>
 2ac:	31 c0       	rjmp	.+98     	; 0x310 <COLUMNA_scan+0x78>
		return 1;
	}
	contador++;
 2ae:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
	
	if(COLUMNA2 == 0)
 2b8:	31 99       	sbic	0x06, 1	; 6
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <COLUMNA_scan+0x36>
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
 2bc:	30 9b       	sbis	0x06, 0	; 6
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <COLUMNA_scan+0x24>
 2c0:	31 9b       	sbis	0x06, 1	; 6
 2c2:	fc cf       	rjmp	.-8      	; 0x2bc <COLUMNA_scan+0x24>
 2c4:	32 9b       	sbis	0x06, 2	; 6
 2c6:	fa cf       	rjmp	.-12     	; 0x2bc <COLUMNA_scan+0x24>
 2c8:	33 9b       	sbis	0x06, 3	; 6
 2ca:	f8 cf       	rjmp	.-16     	; 0x2bc <COLUMNA_scan+0x24>
 2cc:	23 c0       	rjmp	.+70     	; 0x314 <COLUMNA_scan+0x7c>
		return 1;
	}
	contador++;
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
	
	if(COLUMNA3 == 0)
 2d4:	32 99       	sbic	0x06, 2	; 6
 2d6:	09 c0       	rjmp	.+18     	; 0x2ea <COLUMNA_scan+0x52>
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
 2d8:	30 9b       	sbis	0x06, 0	; 6
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <COLUMNA_scan+0x40>
 2dc:	31 9b       	sbis	0x06, 1	; 6
 2de:	fc cf       	rjmp	.-8      	; 0x2d8 <COLUMNA_scan+0x40>
 2e0:	32 9b       	sbis	0x06, 2	; 6
 2e2:	fa cf       	rjmp	.-12     	; 0x2d8 <COLUMNA_scan+0x40>
 2e4:	33 9b       	sbis	0x06, 3	; 6
 2e6:	f8 cf       	rjmp	.-16     	; 0x2d8 <COLUMNA_scan+0x40>
 2e8:	17 c0       	rjmp	.+46     	; 0x318 <COLUMNA_scan+0x80>
		return 1;
	}
	contador++;
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
	
	if(COLUMNA4 == 0)
 2f0:	33 99       	sbic	0x06, 3	; 6
 2f2:	09 c0       	rjmp	.+18     	; 0x306 <COLUMNA_scan+0x6e>
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
 2f4:	30 9b       	sbis	0x06, 0	; 6
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <COLUMNA_scan+0x5c>
 2f8:	31 9b       	sbis	0x06, 1	; 6
 2fa:	fc cf       	rjmp	.-8      	; 0x2f4 <COLUMNA_scan+0x5c>
 2fc:	32 9b       	sbis	0x06, 2	; 6
 2fe:	fa cf       	rjmp	.-12     	; 0x2f4 <COLUMNA_scan+0x5c>
 300:	33 9b       	sbis	0x06, 3	; 6
 302:	f8 cf       	rjmp	.-16     	; 0x2f4 <COLUMNA_scan+0x5c>
 304:	0b c0       	rjmp	.+22     	; 0x31c <COLUMNA_scan+0x84>
		return 1;
	}
	contador++;
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
	
	return 0;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
{

	if(COLUMNA1 == 0)
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
		return 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	08 95       	ret
	contador++;
	
	if(COLUMNA2 == 0)
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
		return 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	08 95       	ret
	contador++;
	
	if(COLUMNA3 == 0)
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
		return 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	08 95       	ret
	contador++;
	
	if(COLUMNA4 == 0)
	{
		while(COLUMNA1 == 0 || COLUMNA2 == 0 || COLUMNA3 == 0 || COLUMNA4 == 0);
		return 1;
 31c:	81 e0       	ldi	r24, 0x01	; 1
	}
	contador++;
	
	return 0;
	
}
 31e:	08 95       	ret

00000320 <FILA_init>:


void FILA_init(uint8_t fila)
{
	FILA1 = 1;
 320:	95 b1       	in	r25, 0x05	; 5
 322:	91 60       	ori	r25, 0x01	; 1
 324:	95 b9       	out	0x05, r25	; 5
	FILA2 = 1;
 326:	95 b1       	in	r25, 0x05	; 5
 328:	92 60       	ori	r25, 0x02	; 2
 32a:	95 b9       	out	0x05, r25	; 5
	FILA3 = 1;
 32c:	95 b1       	in	r25, 0x05	; 5
 32e:	94 60       	ori	r25, 0x04	; 4
 330:	95 b9       	out	0x05, r25	; 5
	FILA4 = 1;
 332:	95 b1       	in	r25, 0x05	; 5
 334:	98 60       	ori	r25, 0x08	; 8
 336:	95 b9       	out	0x05, r25	; 5
	
	switch(fila)
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	69 f0       	breq	.+26     	; 0x356 <FILA_init+0x36>
 33c:	18 f4       	brcc	.+6      	; 0x344 <FILA_init+0x24>
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	31 f0       	breq	.+12     	; 0x34e <FILA_init+0x2e>
 342:	14 c0       	rjmp	.+40     	; 0x36c <FILA_init+0x4c>
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	59 f0       	breq	.+22     	; 0x35e <FILA_init+0x3e>
 348:	84 30       	cpi	r24, 0x04	; 4
 34a:	69 f0       	breq	.+26     	; 0x366 <FILA_init+0x46>
 34c:	0f c0       	rjmp	.+30     	; 0x36c <FILA_init+0x4c>
	{ 
		case 1: FILA1 = 0; break;
 34e:	85 b1       	in	r24, 0x05	; 5
 350:	8e 7f       	andi	r24, 0xFE	; 254
 352:	85 b9       	out	0x05, r24	; 5
 354:	0b c0       	rjmp	.+22     	; 0x36c <FILA_init+0x4c>
		case 2: FILA2 = 0; break;
 356:	85 b1       	in	r24, 0x05	; 5
 358:	8d 7f       	andi	r24, 0xFD	; 253
 35a:	85 b9       	out	0x05, r24	; 5
 35c:	07 c0       	rjmp	.+14     	; 0x36c <FILA_init+0x4c>
		case 3: FILA3 = 0; break;
 35e:	85 b1       	in	r24, 0x05	; 5
 360:	8b 7f       	andi	r24, 0xFB	; 251
 362:	85 b9       	out	0x05, r24	; 5
 364:	03 c0       	rjmp	.+6      	; 0x36c <FILA_init+0x4c>
		case 4: FILA4 = 0; break;
 366:	85 b1       	in	r24, 0x05	; 5
 368:	87 7f       	andi	r24, 0xF7	; 247
 36a:	85 b9       	out	0x05, r24	; 5
	}
	asm("NOP");	
 36c:	00 00       	nop
 36e:	08 95       	ret

00000370 <KEYPAD_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	8f e3       	ldi	r24, 0x3F	; 63
 372:	9c e9       	ldi	r25, 0x9C	; 156
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <KEYPAD_read+0x4>
 378:	00 c0       	rjmp	.+0      	; 0x37a <KEYPAD_read+0xa>
 37a:	00 00       	nop
}

uint8_t KEYPAD_read(void)
{
	_delay_ms(10);
	contador= 0;
 37c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
	
	//Barrido de fila1
	FILA_init(1);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 90 01 	call	0x320	; 0x320 <FILA_init>
	if(COLUMNA_scan())
 386:	0e 94 4c 01 	call	0x298	; 0x298 <COLUMNA_scan>
 38a:	88 23       	and	r24, r24
 38c:	39 f0       	breq	.+14     	; 0x39c <KEYPAD_read+0x2c>
		return tabla[contador];
 38e:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__data_end>
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	ed 5e       	subi	r30, 0xED	; 237
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	80 81       	ld	r24, Z
 39a:	08 95       	ret

	//Barrido de fila2
	FILA_init(2);
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	0e 94 90 01 	call	0x320	; 0x320 <FILA_init>
	if(COLUMNA_scan())
 3a2:	0e 94 4c 01 	call	0x298	; 0x298 <COLUMNA_scan>
 3a6:	88 23       	and	r24, r24
 3a8:	39 f0       	breq	.+14     	; 0x3b8 <KEYPAD_read+0x48>
		return tabla[contador];
 3aa:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__data_end>
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	ed 5e       	subi	r30, 0xED	; 237
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 81       	ld	r24, Z
 3b6:	08 95       	ret
	
	//Barrido de fila3
	FILA_init(3);
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	0e 94 90 01 	call	0x320	; 0x320 <FILA_init>
	
	if(COLUMNA_scan())
 3be:	0e 94 4c 01 	call	0x298	; 0x298 <COLUMNA_scan>
 3c2:	88 23       	and	r24, r24
 3c4:	39 f0       	breq	.+14     	; 0x3d4 <KEYPAD_read+0x64>
		return tabla[contador];
 3c6:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__data_end>
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	ed 5e       	subi	r30, 0xED	; 237
 3ce:	fe 4f       	sbci	r31, 0xFE	; 254
 3d0:	80 81       	ld	r24, Z
 3d2:	08 95       	ret

	//Barrido de fila4
	FILA_init(4);
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	0e 94 90 01 	call	0x320	; 0x320 <FILA_init>
	if(COLUMNA_scan())
 3da:	0e 94 4c 01 	call	0x298	; 0x298 <COLUMNA_scan>
 3de:	88 23       	and	r24, r24
 3e0:	31 f0       	breq	.+12     	; 0x3ee <KEYPAD_read+0x7e>
		return tabla[contador];
 3e2:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__data_end>
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ed 5e       	subi	r30, 0xED	; 237
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	80 81       	ld	r24, Z
	
	return 0;
	
}
 3ee:	08 95       	ret

000003f0 <main>:

int main(void)
{
	LCD_init();	
 3f0:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_init>
	KEYPAD_init();
 3f4:	0e 94 27 01 	call	0x24e	; 0x24e <KEYPAD_init>
	
	LCD_clear();
 3f8:	0e 94 13 01 	call	0x226	; 0x226 <LCD_clear>
	LCD_home();
 3fc:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_home>
	LCD_printf("PROY. EMBEBIDOS");
 400:	83 e2       	ldi	r24, 0x23	; 35
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_printf>
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	83 ed       	ldi	r24, 0xD3	; 211
 40c:	90 e3       	ldi	r25, 0x30	; 48
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	80 40       	sbci	r24, 0x00	; 0
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
 41a:	0e 94 13 01 	call	0x226	; 0x226 <LCD_clear>
	LCD_home();
 41e:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_home>
	LCD_printf(inicio);
 422:	8a e0       	ldi	r24, 0x0A	; 10
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_printf>
	LCD_printf(prr);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_printf>
 432:	2f ef       	ldi	r18, 0xFF	; 255
 434:	83 ed       	ldi	r24, 0xD3	; 211
 436:	90 e3       	ldi	r25, 0x30	; 48
 438:	21 50       	subi	r18, 0x01	; 1
 43a:	80 40       	sbci	r24, 0x00	; 0
 43c:	90 40       	sbci	r25, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
 444:	0e 94 13 01 	call	0x226	; 0x226 <LCD_clear>
	LCD_home();
 448:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_home>
	LCD_printf("INGRESE SU NUMERO:");	
 44c:	83 e3       	ldi	r24, 0x33	; 51
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_printf>
 454:	2f ef       	ldi	r18, 0xFF	; 255
 456:	83 ed       	ldi	r24, 0xD3	; 211
 458:	90 e3       	ldi	r25, 0x30	; 48
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 464:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
 466:	0e 94 13 01 	call	0x226	; 0x226 <LCD_clear>
	LCD_home();
 46a:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_home>
	LCD_cursor(ON);
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 09 01 	call	0x212	; 0x212 <LCD_cursor>
	
    /* Replace with your application code */
    while (1) 
    {
		
		uint8_t dato = KEYPAD_read();
 474:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD_read>
		if (dato != 0)
 478:	88 23       	and	r24, r24
 47a:	e1 f3       	breq	.-8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
			LCD_dato(dato);
 47c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_dato>
 480:	f9 cf       	rjmp	.-14     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>

00000482 <_exit>:
 482:	f8 94       	cli

00000484 <__stop_program>:
 484:	ff cf       	rjmp	.-2      	; 0x484 <__stop_program>
